using ucs with easy
---------------------
[['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['0', '0', '0', '0', '0', '0', '0', '0', '0', 'S']]
---------------------
[['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'],
 ['S', '1', '1', '1', '1', '1', '1', '1', '1', '1']]
---------------------
[['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'S'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '0'],
 ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0']]
distance traveled: 30
execution took: 0.0734720230102539 s
Filename: main.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36  32.8594 MiB  32.8594 MiB           1   @profile(precision=4)
    37                                         def main() -> None:    
    38                                             """
    39                                             The main function
    40                                         
    41                                             :returns: None
    42                                             """
    43  32.8594 MiB   0.0000 MiB           1       start = time.time()
    44                                         
    45  32.8594 MiB   0.0000 MiB           1       parser = argparse.ArgumentParser(description='Use a search function to solve maze coloring problem')
    46  32.8594 MiB   0.0000 MiB           1       parser.add_argument('--difficulty', type=str, required=True)
    47  32.8594 MiB   0.0000 MiB           1       parser.add_argument('--algorithm', type=str, required=True)
    48  32.8594 MiB   0.0000 MiB           1       parser.add_argument('--start', type=int, required=True)
    49  32.8594 MiB   0.0000 MiB           1       parser.add_argument('--end', type=int, required=True)
    50                                         
    51  32.8594 MiB   0.0000 MiB           1       args = parser.parse_args()
    52                                             
    53  32.8594 MiB   0.0000 MiB           1       if args.algorithm == "ucs":
    54  32.8594 MiB   0.0000 MiB           1           if args.difficulty == "easy":
    55  32.8633 MiB   0.0039 MiB           1               print("using ucs with easy")
    56  32.9297 MiB   0.0664 MiB           1               start_ucs("easy", args.start, args.end)
    57                                         
    58                                                 elif args.difficulty == "medium":
    59                                                     print("using ucs with medium")
    60                                                     start_ucs("medium", args.start, args.end)
    61                                         
    62                                                 elif args.difficulty == "hard":
    63                                                     print("using ucs with hard")
    64                                                     start_ucs("hard", args.start, args.end)
    65                                                 else:
    66                                                     parser.print_help()
    67                                                     
    68                                             elif args.algorithm == "a_star":
    69                                                 if args.difficulty == "easy":
    70                                                     print("using A* with easy")
    71                                                     start_a_star("easy", args.start, args.end)
    72                                         
    73                                                 elif args.difficulty == "medium":
    74                                                     print("using A* with medium")
    75                                                     start_a_star("medium", args.start, args.end)
    76                                         
    77                                                 elif args.difficulty == "hard":
    78                                                     print("using A* with hard")
    79                                                     start_a_star("hard", args.start, args.end)
    80                                                 else:
    81                                                     parser.print_help()
    82                                             else:
    83                                                 parser.print_help()
    84  32.9297 MiB   0.0000 MiB           1       end = time.time()
    85                                         
    86  32.9297 MiB   0.0000 MiB           1       print(f"execution took: {end - start} s")


